#include <iterator>
#include <memory>
#include <mrpt/math/CMatrixDynamic.h>
#include <mrpt/math/CMatrixFixed.h>
#include <mrpt/math/CVectorDynamic.h>
#include <mrpt/math/MatrixVectorBase.h>
#include <mrpt/math/TPoint2D.h>
#include <mrpt/math/TPoint3D.h>
#include <mrpt/math/TPose2D.h>
#include <mrpt/math/TPose3D.h>
#include <mrpt/math/math_frwds.h>
#include <mrpt/math/matrix_size_t.h>
#include <sstream> // __str__
#include <string>

#include <functional>
#include <pybind11/pybind11.h>
#include <string>
#include <pybind11/stl.h>


#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*)
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_mrpt_math_CMatrixDynamic_1(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // mrpt::math::CMatrixDynamic file:mrpt/math/CMatrixDynamic.h line:41
		pybind11::class_<mrpt::math::CMatrixDynamic<double>, std::shared_ptr<mrpt::math::CMatrixDynamic<double>>> cl(M("mrpt::math"), "CMatrixDynamic_double_t", "");
		cl.def( pybind11::init( [](mrpt::math::CMatrixDynamic<double> const &o){ return new mrpt::math::CMatrixDynamic<double>(o); } ) );
		cl.def( pybind11::init( [](){ return new mrpt::math::CMatrixDynamic<double>(); } ), "doc" );
		cl.def( pybind11::init( [](size_t const & a0){ return new mrpt::math::CMatrixDynamic<double>(a0); } ), "doc" , pybind11::arg("row"));
		cl.def( pybind11::init<size_t, size_t>(), pybind11::arg("row"), pybind11::arg("col") );

		cl.def( pybind11::init<const class mrpt::math::CMatrixDynamic<double> &, size_t, size_t>(), pybind11::arg("m"), pybind11::arg("cropRowCount"), pybind11::arg("cropColCount") );

		cl.def("setFromMatrixLike", (void (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CMatrixDynamic<float> &)) &mrpt::math::CMatrixDynamic<double>::setFromMatrixLike<mrpt::math::CMatrixDynamic<float>>, "C++: mrpt::math::CMatrixDynamic<double>::setFromMatrixLike(const class mrpt::math::CMatrixDynamic<float> &) --> void", pybind11::arg("m"));
		cl.def("setFromMatrixLike", (void (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CMatrixFixed<double, 3, 3> &)) &mrpt::math::CMatrixDynamic<double>::setFromMatrixLike<mrpt::math::CMatrixFixed<double, 3, 3>>, "C++: mrpt::math::CMatrixDynamic<double>::setFromMatrixLike(const class mrpt::math::CMatrixFixed<double, 3, 3> &) --> void", pybind11::arg("m"));
		cl.def("assign", (class mrpt::math::CMatrixDynamic<double> & (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CMatrixDynamic<double> &)) &mrpt::math::CMatrixDynamic<double>::operator=<double>, "C++: mrpt::math::CMatrixDynamic<double>::operator=(const class mrpt::math::CMatrixDynamic<double> &) --> class mrpt::math::CMatrixDynamic<double> &", pybind11::return_value_policy::automatic, pybind11::arg("m"));
		cl.def("assign", (class mrpt::math::CMatrixDynamic<double> & (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CMatrixDynamic<float> &)) &mrpt::math::CMatrixDynamic<double>::operator=<float>, "C++: mrpt::math::CMatrixDynamic<double>::operator=(const class mrpt::math::CMatrixDynamic<float> &) --> class mrpt::math::CMatrixDynamic<double> &", pybind11::return_value_policy::automatic, pybind11::arg("m"));
		cl.def("assign", (class mrpt::math::CMatrixDynamic<double> & (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CMatrixFixed<double, 3, 3> &)) &mrpt::math::CMatrixDynamic<double>::operator=<3UL,3UL>, "C++: mrpt::math::CMatrixDynamic<double>::operator=(const class mrpt::math::CMatrixFixed<double, 3, 3> &) --> class mrpt::math::CMatrixDynamic<double> &", pybind11::return_value_policy::automatic, pybind11::arg("m"));
		cl.def("swap", (void (mrpt::math::CMatrixDynamic<double>::*)(class mrpt::math::CMatrixDynamic<double> &)) &mrpt::math::CMatrixDynamic<double>::swap, "C++: mrpt::math::CMatrixDynamic<double>::swap(class mrpt::math::CMatrixDynamic<double> &) --> void", pybind11::arg("o"));
		cl.def("assign", (class mrpt::math::CMatrixDynamic<double> & (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CMatrixDynamic<double> &)) &mrpt::math::CMatrixDynamic<double>::operator=, "C++: mrpt::math::CMatrixDynamic<double>::operator=(const class mrpt::math::CMatrixDynamic<double> &) --> class mrpt::math::CMatrixDynamic<double> &", pybind11::return_value_policy::automatic, pybind11::arg("m"));
		cl.def("rows", (int (mrpt::math::CMatrixDynamic<double>::*)() const) &mrpt::math::CMatrixDynamic<double>::rows, "C++: mrpt::math::CMatrixDynamic<double>::rows() const --> int");
		cl.def("cols", (int (mrpt::math::CMatrixDynamic<double>::*)() const) &mrpt::math::CMatrixDynamic<double>::cols, "C++: mrpt::math::CMatrixDynamic<double>::cols() const --> int");
		cl.def("setSize", [](mrpt::math::CMatrixDynamic<double> &o, size_t const & a0, size_t const & a1) -> void { return o.setSize(a0, a1); }, "", pybind11::arg("row"), pybind11::arg("col"));
		cl.def("setSize", (void (mrpt::math::CMatrixDynamic<double>::*)(size_t, size_t, bool)) &mrpt::math::CMatrixDynamic<double>::setSize, "C++: mrpt::math::CMatrixDynamic<double>::setSize(size_t, size_t, bool) --> void", pybind11::arg("row"), pybind11::arg("col"), pybind11::arg("zeroNewElements"));
		cl.def("resize", (void (mrpt::math::CMatrixDynamic<double>::*)(size_t, size_t)) &mrpt::math::CMatrixDynamic<double>::resize, "C++: mrpt::math::CMatrixDynamic<double>::resize(size_t, size_t) --> void", pybind11::arg("row"), pybind11::arg("col"));
		cl.def("resize", (void (mrpt::math::CMatrixDynamic<double>::*)(size_t)) &mrpt::math::CMatrixDynamic<double>::resize, "C++: mrpt::math::CMatrixDynamic<double>::resize(size_t) --> void", pybind11::arg("vectorLen"));
		cl.def("derived", (class mrpt::math::CMatrixDynamic<double> & (mrpt::math::CMatrixDynamic<double>::*)()) &mrpt::math::CMatrixDynamic<double>::derived, "C++: mrpt::math::CMatrixDynamic<double>::derived() --> class mrpt::math::CMatrixDynamic<double> &", pybind11::return_value_policy::automatic);
		cl.def("conservativeResize", (void (mrpt::math::CMatrixDynamic<double>::*)(size_t, size_t)) &mrpt::math::CMatrixDynamic<double>::conservativeResize, "C++: mrpt::math::CMatrixDynamic<double>::conservativeResize(size_t, size_t) --> void", pybind11::arg("row"), pybind11::arg("col"));
		cl.def("data", (double * (mrpt::math::CMatrixDynamic<double>::*)()) &mrpt::math::CMatrixDynamic<double>::data, "C++: mrpt::math::CMatrixDynamic<double>::data() --> double *", pybind11::return_value_policy::automatic);
		cl.def("__call__", (double & (mrpt::math::CMatrixDynamic<double>::*)(size_t, size_t)) &mrpt::math::CMatrixDynamic<double>::operator(), "C++: mrpt::math::CMatrixDynamic<double>::operator()(size_t, size_t) --> double &", pybind11::return_value_policy::reference, pybind11::arg("row"), pybind11::arg("col"));
		cl.def("cast_float", (class mrpt::math::CMatrixDynamic<float> (mrpt::math::CMatrixDynamic<double>::*)() const) &mrpt::math::CMatrixDynamic<double>::cast_float, "C++: mrpt::math::CMatrixDynamic<double>::cast_float() const --> class mrpt::math::CMatrixDynamic<float>");
		cl.def("cast_double", (class mrpt::math::CMatrixDynamic<double> (mrpt::math::CMatrixDynamic<double>::*)() const) &mrpt::math::CMatrixDynamic<double>::cast_double, "C++: mrpt::math::CMatrixDynamic<double>::cast_double() const --> class mrpt::math::CMatrixDynamic<double>");
		cl.def("llt_solve", (class mrpt::math::CVectorDynamic<double> (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CVectorDynamic<double> &) const) &mrpt::math::CMatrixDynamic<double>::llt_solve, "C++: mrpt::math::CMatrixDynamic<double>::llt_solve(const class mrpt::math::CVectorDynamic<double> &) const --> class mrpt::math::CVectorDynamic<double>", pybind11::arg("b"));
		cl.def("lu_solve", (class mrpt::math::CVectorDynamic<double> (mrpt::math::CMatrixDynamic<double>::*)(const class mrpt::math::CVectorDynamic<double> &) const) &mrpt::math::CMatrixDynamic<double>::lu_solve, "C++: mrpt::math::CMatrixDynamic<double>::lu_solve(const class mrpt::math::CVectorDynamic<double> &) const --> class mrpt::math::CVectorDynamic<double>", pybind11::arg("b"));

		// Manually-added matrix methods:
		using dat_t = double;
		using mat_t = mrpt::math::CMatrixDynamic<dat_t>;
		cl.def("__getitem__", [](const mat_t&self, pybind11::tuple coord) -> dat_t { if (coord.size()==2) return self.coeff(coord[0].cast<size_t>(), coord[1].cast<size_t>()); else if (coord.size()==1) return self[coord[0].cast<size_t>()]; else throw std::invalid_argument("Access with [idx] or [row,col]"); });
		cl.def("__setitem__", [](mat_t&self, pybind11::tuple coord, dat_t val) { if (coord.size()==2) self.coeffRef(coord[0].cast<size_t>(), coord[1].cast<size_t>())=val; else if (coord.size()==1) self[coord[0].cast<size_t>()]=val; else throw std::invalid_argument("Access with [idx] or [row,col]"); });
		cl.def("__str__", [](const mat_t& o) -> std::string { return o.asString(); } );
		cl.def("inMatlabFormat", [](const mat_t& o) -> std::string { return o.inMatlabFormat(); } );
		cl.def("size", [](const mat_t&self) -> pybind11::tuple { return pybind11::make_tuple(self.cols(),self.rows()); });
		cl.def_static("Identity", [](const size_t N) -> mat_t { return mat_t::Identity(N); }, "Returns the NxN identity matrix");
		cl.def_static("Zero", [](const size_t nRows, const size_t nCols) -> mat_t { return mat_t::Zero(nRows,nCols); }, "Returns a matrix with zeroes");
		cl.def(pybind11::init( [](pybind11::list vals){ auto m = new mat_t(); const auto nR = vals.size(); if (!nR) return m; const auto nC = vals[0].cast<pybind11::list>().size(); m->setSize(nR,nC); for (size_t r=0;r<nR;r++) { const auto row = vals[r].cast<pybind11::list>(); for (size_t c=0;c<nC;c++) m->coeffRef(r,c) = row[c].cast<dat_t>(); } return m; }));
		cl.def("to_list", [](const mat_t&self) -> pybind11::list { auto l = pybind11::list(); const auto nR = self.rows(), nC = self.cols(); for (size_t r=0;r<nR;r++) { auto row = pybind11::list(); l.append(row); for (size_t c=0;c<nC;c++) row.append(self.coeff(r,c)); } return l; });
	}
	{ // mrpt::math::CMatrixDynamic file:mrpt/math/CMatrixDynamic.h line:41
		pybind11::class_<mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>, std::shared_ptr<mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>, mrpt::math::MatrixBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>> cl(M("mrpt::math"), "CMatrixDynamic_mrpt_math_TPoint3D_float_t", "");
		cl.def( pybind11::init( [](mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>> const &o){ return new mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>(o); } ) );
		cl.def( pybind11::init( [](){ return new mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>(); } ), "doc" );
		cl.def( pybind11::init( [](size_t const & a0){ return new mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>(a0); } ), "doc" , pybind11::arg("row"));
		cl.def( pybind11::init<size_t, size_t>(), pybind11::arg("row"), pybind11::arg("col") );

		cl.def( pybind11::init<const class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &, size_t, size_t>(), pybind11::arg("m"), pybind11::arg("cropRowCount"), pybind11::arg("cropColCount") );

		cl.def("assign", (class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > & (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(const class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator=<mrpt::math::TPoint3D_<float>>, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator=(const class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &) --> class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &", pybind11::return_value_policy::automatic, pybind11::arg("m"));
		cl.def("swap", (void (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::swap, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::swap(class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &) --> void", pybind11::arg("o"));
		cl.def("assign", (class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > & (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(const class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator=, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator=(const class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &) --> class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &", pybind11::return_value_policy::automatic, pybind11::arg("m"));
		cl.def("rows", (int (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)() const) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::rows, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::rows() const --> int");
		cl.def("cols", (int (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)() const) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::cols, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::cols() const --> int");
		cl.def("setSize", [](mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>> &o, size_t const & a0, size_t const & a1) -> void { return o.setSize(a0, a1); }, "", pybind11::arg("row"), pybind11::arg("col"));
		cl.def("setSize", (void (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(size_t, size_t, bool)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::setSize, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::setSize(size_t, size_t, bool) --> void", pybind11::arg("row"), pybind11::arg("col"), pybind11::arg("zeroNewElements"));
		cl.def("resize", (void (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(size_t, size_t)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::resize, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::resize(size_t, size_t) --> void", pybind11::arg("row"), pybind11::arg("col"));
		cl.def("resize", (void (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(size_t)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::resize, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::resize(size_t) --> void", pybind11::arg("vectorLen"));
		cl.def("derived", (class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > & (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)()) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::derived, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::derived() --> class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &", pybind11::return_value_policy::automatic);
		cl.def("conservativeResize", (void (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(size_t, size_t)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::conservativeResize, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::conservativeResize(size_t, size_t) --> void", pybind11::arg("row"), pybind11::arg("col"));
		cl.def("data", (struct mrpt::math::TPoint3D_<float> * (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)()) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::data, "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::data() --> struct mrpt::math::TPoint3D_<float> *", pybind11::return_value_policy::automatic);
		cl.def("__call__", (struct mrpt::math::TPoint3D_<float> & (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(size_t, size_t)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator(), "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator()(size_t, size_t) --> struct mrpt::math::TPoint3D_<float> &", pybind11::return_value_policy::automatic, pybind11::arg("row"), pybind11::arg("col"));
		cl.def("__getitem__", (struct mrpt::math::TPoint3D_<float> & (mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::*)(size_t)) &mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator[], "C++: mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>::operator[](size_t) --> struct mrpt::math::TPoint3D_<float> &", pybind11::return_value_policy::automatic, pybind11::arg("ith"));
		cl.def("mbDerived", (class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > & (mrpt::math::MatrixBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)()) &mrpt::math::MatrixBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::mbDerived, "C++: mrpt::math::MatrixBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::mbDerived() --> class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > &", pybind11::return_value_policy::automatic);
		cl.def("assign", (class mrpt::math::MatrixBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > & (mrpt::math::MatrixBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(const class mrpt::math::MatrixBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > &)) &mrpt::math::MatrixBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::operator=, "C++: mrpt::math::MatrixBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::operator=(const class mrpt::math::MatrixBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > &) --> class mrpt::math::MatrixBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > &", pybind11::return_value_policy::automatic, pybind11::arg(""));
		cl.def("setConstant", (void (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(const struct mrpt::math::TPoint3D_<float>)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::setConstant, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::setConstant(const struct mrpt::math::TPoint3D_<float>) --> void", pybind11::arg("value"));
		cl.def("setConstant", (void (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(size_t, size_t, const struct mrpt::math::TPoint3D_<float>)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::setConstant, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::setConstant(size_t, size_t, const struct mrpt::math::TPoint3D_<float>) --> void", pybind11::arg("nrows"), pybind11::arg("ncols"), pybind11::arg("value"));
		cl.def("setConstant", (void (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(size_t, const struct mrpt::math::TPoint3D_<float>)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::setConstant, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::setConstant(size_t, const struct mrpt::math::TPoint3D_<float>) --> void", pybind11::arg("nrows"), pybind11::arg("value"));
		cl.def_static("Constant", (class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > (*)(const struct mrpt::math::TPoint3D_<float>)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::Constant, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::Constant(const struct mrpt::math::TPoint3D_<float>) --> class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> >", pybind11::arg("value"));
		cl.def_static("Constant", (class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > (*)(size_t, size_t, const struct mrpt::math::TPoint3D_<float>)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::Constant, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::Constant(size_t, size_t, const struct mrpt::math::TPoint3D_<float>) --> class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> >", pybind11::arg("nrows"), pybind11::arg("ncols"), pybind11::arg("value"));
		cl.def("assign", (void (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(const unsigned long, const struct mrpt::math::TPoint3D_<float>)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::assign, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::assign(const unsigned long, const struct mrpt::math::TPoint3D_<float>) --> void", pybind11::arg("N"), pybind11::arg("value"));
		cl.def("coeffRef", (struct mrpt::math::TPoint3D_<float> & (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(int, int)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::coeffRef, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::coeffRef(int, int) --> struct mrpt::math::TPoint3D_<float> &", pybind11::return_value_policy::automatic, pybind11::arg("r"), pybind11::arg("c"));
		cl.def("coeff", (const struct mrpt::math::TPoint3D_<float> & (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(int, int) const) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::coeff, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::coeff(int, int) const --> const struct mrpt::math::TPoint3D_<float> &", pybind11::return_value_policy::automatic, pybind11::arg("r"), pybind11::arg("c"));
		cl.def("isSquare", (bool (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)() const) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::isSquare, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::isSquare() const --> bool");
		cl.def("empty", (bool (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)() const) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::empty, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::empty() const --> bool");
		cl.def("norm_inf", (struct mrpt::math::TPoint3D_<float> (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)() const) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::norm_inf, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::norm_inf() const --> struct mrpt::math::TPoint3D_<float>");
		cl.def("norm", (struct mrpt::math::TPoint3D_<float> (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)() const) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::norm, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::norm() const --> struct mrpt::math::TPoint3D_<float>");
		cl.def("asString", (std::string (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)() const) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::asString, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::asString() const --> std::string");
		cl.def("assign", (class mrpt::math::MatrixVectorBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > & (mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>,mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float> >>::*)(const class mrpt::math::MatrixVectorBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > &)) &mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::operator=, "C++: mrpt::math::MatrixVectorBase<mrpt::math::TPoint3D_<float>, mrpt::math::CMatrixDynamic<mrpt::math::TPoint3D_<float>>>::operator=(const class mrpt::math::MatrixVectorBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > &) --> class mrpt::math::MatrixVectorBase<struct mrpt::math::TPoint3D_<float>, class mrpt::math::CMatrixDynamic<struct mrpt::math::TPoint3D_<float> > > &", pybind11::return_value_policy::automatic, pybind11::arg(""));
	}
}
